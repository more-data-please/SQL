/* In this analysis, I imported a Spotify dataset from Kaggle. Next, I created a table to put the Spotify data into. 
Then, I performed analytics on the dataset using the SQL queries below. */

/*Data Source: https://www.kaggle.com/equinxx/spotify-top-50-songs-in-2021?select=spotify_top50_2021.csv*/


/* The following query was used to create table for the Spotify data that will be used to perform the analysis. */

CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
song_key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
song_mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL );


/* This query was used to determine the top 10 artists based on popularity. */
SELECT artist_name, 
popularity
FROM BIT_DB.Spotifydata
ORDER BY popularity DESC LIMIT 10;


/* This query was used to determine which artist released the longest song*/
SELECT artist_name, 
MAX(duration_ms)
FROM BIT_DB.Spotifydata
LIMIT 1;


/* This query was used to determine the average danceability for the 10 most popular songs. */
SELECT track_name, 
AVG(danceability), 
popularity
FROM BIT_DB.Spotifydata
GROUP BY track_name
ORDER BY popularity DESC LIMIT 10;


/* This query was used to display songs with the highest tempo and to compare their tempo to its danceability and popularity. */
SELECT track_name, 
MAX(tempo) AS tempo, 
danceability, 
popularity
FROM BIT_DB.Spotifydata 
GROUP BY track_name
ORDER BY tempo DESC LIMIT 5;


/* This query was used to discover how the danceability of a track affects the popularity of the track. */
SELECT track_name, popularity, danceability
FROM BIT_DB.Spotifydata
ORDER BY popularity DESC;

